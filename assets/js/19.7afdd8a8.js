(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{177:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"散列函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 散列函数")]),t._v(" "),s("p",[t._v("散列函数是这样的函数，即无论你给他什么数据，他都还你一个数字。")]),t._v(" "),s("p",[t._v("散列函数其实必须满足一些要求")]),t._v(" "),s("ul",[s("li",[t._v("它必须是一致的。假如你输入apple得到的是4，那么每次输入apple，得到的都必须是4")]),t._v(" "),s("li",[t._v("他应将不同的输入映射到不同的数字。(最理想情况)")])]),t._v(" "),s("p",[t._v("散列函数这么具体的原因如下")]),t._v(" "),s("ul",[s("li",[t._v("总是将同样的输入映射到相同的索引。")]),t._v(" "),s("li",[t._v("将不同的输入映射到不同的索引")]),t._v(" "),s("li",[t._v("知道数组有多大，只返回有效索引")])]),t._v(" "),s("p",[t._v("python中的字典，就是一个散列表！散列表由键和值组成。")]),t._v(" "),s("h4",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("p",[t._v("cache就是用散列表储存的，用python实现如下")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_page")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#返回缓存的数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_data_from_server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将数据保存到缓存中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("散列表适用于：")]),t._v(" "),s("ul",[s("li",[t._v("模拟映射关系")]),t._v(" "),s("li",[t._v("防止重复")]),t._v(" "),s("li",[t._v("缓存/记住数据")])]),t._v(" "),s("h1",{attrs:{id:"冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),s("p",[t._v("简单来说，就是给两个键分配的位置相同")]),t._v(" "),s("p",[t._v("而处理冲突最简单的方式，就是如果两个键映射到了同一个位置，那么就在这个位置存储一个链表。")]),t._v(" "),s("h1",{attrs:{id:"性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能","aria-hidden":"true"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),s("p",[t._v("在平均情况下，散列表执行各种操作的时间都为O(1),这被称为常量时间。")]),t._v(" "),s("p",[t._v("在最高情况下，散列表所有操作的运行时间都为O(n)，线性时间。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("散列表(平均)")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("散列表(最糟)")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("数组")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("链表")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("查找")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(n)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(n)")])]),t._v(" "),s("tr",[s("td",[t._v("插入")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(1    )")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(n)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("删除")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(1    )")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(n)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("O(1)")])])])]),t._v(" "),s("p",[t._v("在平均情况下，散列表的查找(获取给定索引处的值)速度和数组一样快，而插入和删除速度与链表一样快")]),t._v(" "),s("p",[t._v("但在最糟情况下，散列表的各项操作的速度都很慢")]),t._v(" "),s("p",[t._v("因此，在使用散列表时，避开最早情况至关重要")]),t._v(" "),s("p",[t._v("因此要有")]),t._v(" "),s("ul",[s("li",[t._v("较低的填装因子")]),t._v(" "),s("li",[t._v("良好的散列函数")])]),t._v(" "),s("h1",{attrs:{id:"填装因子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#填装因子","aria-hidden":"true"}},[t._v("#")]),t._v(" 填装因子")]),t._v(" "),s("p",[t._v("散列表的填装因子很容易计算")]),t._v(" "),s("blockquote",[s("p",[t._v("散列表包含的元素数/位置总数")])]),t._v(" "),s("p",[t._v("填装因子的度量的是散列表中有多少位置是空的")]),t._v(" "),s("p",[t._v("一个不错的经验规则是：一旦填装因子大于0.7，就调整散列表的长度")]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ul",[s("li",[t._v("可以结合散列函数和数组来创建散列表")]),t._v(" "),s("li",[t._v("冲突很糟糕，应使用可以最大限度减少冲突的散列函数")]),t._v(" "),s("li",[t._v("散列表的查找，插入和删除速度都非常快")]),t._v(" "),s("li",[t._v("散列表适用于模拟拟合关系")]),t._v(" "),s("li",[t._v("一旦填装因子超过0.7，就该调整散列表长度")]),t._v(" "),s("li",[t._v("散列表可用于缓存数据")]),t._v(" "),s("li",[t._v("散列表非常适合用于防止重复。")])])])}],!1,null,null,null);a.default=n.exports}}]);